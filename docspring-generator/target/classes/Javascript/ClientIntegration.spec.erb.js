/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

;(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory)
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'))
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DocSpring)
  }
})(this, function (expect, DocSpring) {
  'use strict'

  var docspring

  beforeEach(function () {
    <%= render :setup_client %>
    config.basePath = 'http://api.docspring.local:31337/api/v1'
    // docspring = new docspring.Client(config);
  })

  describe('Client', function () {
    describe('testAuthentication', function () {
      it('should call testAuthentication method on PDFApi prototype', function (done) {
        docspring.testAuthentication(function (error, response) {
          if (error) throw error
          expect(response.status).to.be('success')
          done()
        })
      })
    })

    describe('combineSubmissions', function () {
      it('should call combineSubmissions successfully and wait for PDF', function (done) {
        this.timeout(10000)
        var opts = {
          submission_ids: ['sub_000000000000000001', 'sub_000000000000000002'],
        }
        docspring.combineSubmissions(opts, function (error, response) {
          if (error) throw error
          expect(response.status).to.be('success')
          expect(response.combined_submission.id).to.match(/^com_/)
          expect(response.combined_submission.state).to.be('processed')
          done()
        })
      })
    })

    describe('combinePdfs', function () {
      it('should call combinePdfs successfully and wait for the PDF', function (done) {
        this.timeout(10000)
        <%= test_for :combine_pdfs, type: :wrapper, wait: true %>
      })

      it('should call combinePdfs successfully and not wait for the PDF', function (done) {
        this.timeout(10000)
        <%= test_for :combine_pdfs, type: :wrapper, wait: false %>
      })
    })

    describe('generatePDF', function () {
      it('should call generatePDF and wait for the PDF', function (done) {
        this.timeout(10000)
        <%= test_for :generate_pdf, type: :wrapper, wait: true %>
      })
    })

    describe('generatePDF', function () {
      it('should call generatePDF and not wait for the PDF', function (done) {
        this.timeout(10000)
        <%= test_for :generate_pdf, type: :wrapper, wait: false %>
      })
    })

    describe('updateTemplate', function () {
      it('should call updateTemplate successfully', function (done) {
        this.timeout(10000)
        <%= test_for :update_template, type: :wrapper %>
      })
    })

    describe('addFieldsToTemplate', function () {
      it('should call addFieldsToTemplate successfully', function (done) {
        this.timeout(10000)
        <%= test_for :add_fields_to_template, type: :wrapper %>
      })
    })
  })
})
